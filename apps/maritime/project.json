{
  "name": "maritime",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "projectType": "application",
  "sourceRoot": "apps/maritime/src",
  "prefix": "markets",
  "targets": {
    "build": {
      "executor": "@angular-devkit/build-angular:browser",
      "outputs": ["{options.outputPath}"],
      "options": {
        "outputPath": "dist/apps/maritime/browser",
        "index": "apps/maritime/src/index.html",
        "main": "apps/maritime/src/main.ts",
        "polyfills": "apps/maritime/src/polyfills.ts",
        "tsConfig": "apps/maritime/tsconfig.app.json",
        "inlineStyleLanguage": "scss",
        "assets": ["apps/maritime/src/favicon.ico", "apps/maritime/src/assets"],
        "styles": ["apps/maritime/src/styles.scss"],
        "scripts": []
      },
      "configurations": {
        "production": {
          "budgets": [
            {
              "type": "initial",
              "maximumWarning": "260kb",
              "maximumError": "300kB"
            },
            {
              "type": "anyComponentStyle",
              "maximumWarning": "2kb",
              "maximumError": "3kb"
            },
            {
              "type": "bundle",
              "name": "main",
              "maximumWarning": "225kb",
              "maximumError": "230kb"
            },
            {
              "type": "bundle",
              "name": "styles",
              "maximumWarning": "154b",
              "maximumError": "155b"
            },
            {
              "type": "bundle",
              "name": "common",
              "maximumWarning": "10kB",
              "maximumError": "11.22kB"
            },
            {
              "type": "bundle",
              "name": "polyfills",
              "maximumWarning": "34kb",
              "maximumError": "34kb"
            }
          ],
          "fileReplacements": [
            {
              "replace": "libs/environments/src/lib/environment.ts",
              "with": "libs/environments/src/lib/environment.prod.ts"
            }
          ],
          "outputHashing": "all"
        },
        "development": {
          "buildOptimizer": false,
          "optimization": false,
          "vendorChunk": true,
          "extractLicenses": false,
          "sourceMap": true,
          "namedChunks": true
        }
      },
      "defaultConfiguration": "production"
    },
    "serve": {
      "executor": "@angular-devkit/build-angular:dev-server",
      "configurations": {
        "production": {
          "browserTarget": "maritime:build:production"
        },
        "development": {
          "browserTarget": "maritime:build:development"
        }
      },
      "defaultConfiguration": "development",
      "options": {
        "proxyConfig": "apps/maritime/proxy.conf.json"
      }
    },
    "serve-for-e2e": {
      "executor": "@angular-devkit/architect:allOf",
      "options": {
        "targets": [
          { "target": "maritime:serve" },
          { "target": "api:serve" }
        ]
      }
    },
    "extract-i18n": {
      "executor": "@angular-devkit/build-angular:extract-i18n",
      "options": {
        "browserTarget": "maritime:build"
      }
    },
    "lint": {
      "executor": "@nrwl/linter:eslint",
      "options": {
        "lintFilePatterns": ["apps/maritime/**/*.ts", "apps/maritime/**/*.html"]
      }
    },
    "test": {
      "executor": "@nrwl/jest:jest",
      "outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
      "options": {
        "jestConfig": "apps/maritime/jest.config.ts",
        "passWithNoTests": true
      }
    },
    "server": {
      "executor": "@angular-devkit/build-angular:server",
      "options": {
        "outputPath": "dist/apps/apps/maritime/server",
        "main": "apps/maritime/server.ts",
        "tsConfig": "apps/maritime/tsconfig.server.json"
      },
      "configurations": {
        "production": {
          "outputHashing": "media",
          "fileReplacements": [
            {
              "replace": "libs/environments/src/lib/environment.ts",
              "with": "libs/environments/src/lib/environment.prod.ts"
            }
          ]
        },
        "development": {
          "optimization": false,
          "sourceMap": true,
          "extractLicenses": false
        }
      },
      "defaultConfiguration": "production"
    },
    "serve-ssr": {
      "executor": "@nguniversal/builders:ssr-dev-server",
      "configurations": {
        "development": {
          "browserTarget": "maritime:build:development",
          "serverTarget": "maritime:server:development"
        },
        "production": {
          "browserTarget": "maritime:build:production",
          "serverTarget": "maritime:server:production"
        }
      },
      "defaultConfiguration": "development"
    },
    "prerender": {
      "executor": "@nguniversal/builders:prerender",
      "options": {
        "routes": ["/"],
        "guessRoutes": true,
        "routesFile": "apps/maritime/routes.txt"
      },
      "configurations": {
        "development": {
          "browserTarget": "maritime:build:development",
          "serverTarget": "maritime:server:development"
        },
        "production": {
          "browserTarget": "maritime:build:production",
          "serverTarget": "maritime:server:production"
        }
      },
      "defaultConfiguration": "production"
    },
    "deploy": {
      "executor": "nx:run-commands",
      "dependsOn": ["prerender"],
      "options": {
        "commands": [
          {
            "command": "`[ {args.environment} != dev ]` && `[ {args.environment} != prod ]` && exit 1 || exit 0",
            "forwardAllArgs": true
          },
          {
            "command": "echo 'Deploying to {args.environment} environment'",
            "forwardAllArgs": true
          },
          {
            "command": "aws s3 sync ./dist/apps/maritime/browser s3://marketsapp{args.environment} --delete",
            "forwardAllArgs": true
          },
          {
            "command": "`[ {args.environment} == prod ]` && aws cloudfront create-invalidation --distribution-id E14PHNQ9MOMSLM --path='*' || exit 0",
            "forwardAllArgs": true
          },
          {
            "command": "`[ {args.environment} == dev ]` && aws cloudfront create-invalidation --distribution-id ECTDT472IS5LQ --path='*'|| exit 0",
            "forwardAllArgs": true
          }
        ]
      }
    }
  },
  "tags": []
}
